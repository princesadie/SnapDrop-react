/**
 * Copyright (c) 2015-present, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */
'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function resolveModuleRequires(resolutionResponse, module) {
  var resolvedDeps = Object.create(null);

  var resolvedPairs = resolutionResponse.getResolvedDependencyPairs(module);
  if (!resolvedPairs) {
    return Promise.resolve([]);
  }

  return Promise.all(resolvedPairs.map(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2);

    var depName = _ref2[0];
    var depModule = _ref2[1];

    if (depModule) {
      return depModule.getName().then(function (name) {
        resolvedDeps[depName] = name;
      });
    }
  })).then(function () {
    return module.getDependencies(resolutionResponse.transformOptions);
  }).then(function (dependencies) {
    return dependencies.map(function (dep) {
      return resolvedDeps[dep] || dep;
    });
  });
}

/**
 * Returns an object that indicates in which module each module is required.
 */
function getInverseDependencies(resolutionResponse) {
  var cache = Object.create(null);

  return Promise.all(resolutionResponse.dependencies.map(function (module) {
    return Promise.all([module.getName(), resolveModuleRequires(resolutionResponse, module)]).then(function (_ref3) {
      var _ref4 = _slicedToArray(_ref3, 2);

      var moduleName = _ref4[0];
      var resolvedDependencies = _ref4[1];

      resolvedDependencies.forEach(function (dep) {
        if (!cache[dep]) {
          cache[dep] = [];
        }

        cache[dep].push(moduleName);
      });
    });
  })).then(function () {
    return cache;
  });
}

module.exports = getInverseDependencies;